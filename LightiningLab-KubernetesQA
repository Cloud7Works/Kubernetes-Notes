Question: 1
Create a Persistent Volume called log-volume. 

It should make use of a storage class name manual. 

It should use RWX as the access mode and have a size of 1Gi. The volume should use the hostPath /opt/volume/nginx
Next, create a PVC called log-claim requesting a minimum of 200Mi of storage. This PVC should bind to log-volume.
Mount this in a pod called logger at the location /var/www/nginx. This pod should use the image nginx:alpine.

Answer:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: log-volume
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/opt/volume/nginx"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: log-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 200Mi

---
apiVersion: v1
kind: Pod
metadata:
  name: logger
spec:
  volumes:
    - name: task-pv-storage
      persistentVolumeClaim:
        claimName: log-claim
  containers:
    - name: task-pv-container
      image: nginx:alpine
      volumeMounts:
        - mountPath: "/var/www/nginx"
          name: task-pv-storage


Test:
Kubes commands
kubectl get pv log-volume (check pv status, needs to be bound)
k get pods (check if its running)
When persistentVolumeclaim is deleted, you can set persistentVolumereclaimpolicy to retain, delete or recycle (only data deleted)

Question: 2
We have deployed a new pod called secure-pod and a service called secure-service.
Incoming or Outgoing connections to this pod are not working.
Troubleshoot why this is happening.

Make sure that incoming connection from the pod webapp-color are successful.

Important: Don't delete any current objects deployed.

Answer:
Secure-service Controls secure-pod
Network Policy is used to restrict access between Secure Service, Pod and Incoming connections from another Pod.
Check the configuration of secure service.

#Get to the pod
k get svc (get all services and iP Addresses)
k exec -it webapp-color -- sh
nc -z -v secure-service 80 (netcat)
nc -z -v -w l secure-service 80
k get netpol

Services enable communication between Node to Pods.
Services have Target Port, Port and NodePort
Services use Selectors to connect the service to Pod. 
ClusterIP is the default type in service

Answer:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: "2020-04-26T22:59:32Z"
  generation: 1
  name: default-deny
  namespace: default
  resourceVersion: "823"
  selfLink: /apis/networking.k8s.io/v1/namespaces/default/networkpolicies/default-deny
  uid: a3c91295-790c-4a6f-96ea-dc0dd8765ef9
spec:
  podSelector:
    matchLabels:
      run: secure-pod
  ingress:
  - from:
    - podSelector:
        matchLabels:
          name: webapp-color

Question: 3
Create a pod called time-check in the dvl1987 namespace. 
This pod should run a container called time-check that uses the busybox image.
Create a config map called time-config with the data TIME_FREQ=10 in the same namespace.
The time-check container should run the command: while true; do date; sleep $TIME_FREQ;done and 
write the result to the location /opt/time/time-check.log.
The path /opt/time on the pod should mount a volume that lasts the lifetime of this pod.

k create namespace dvl1987
k create -n dvl1987 configmap time-config --from-literal=TIME_FREQ=10
k run --generator=run-pod/v1 time-check --image=busybox --dry-run -o yaml >pod.yaml

Concept:
containers in the Pod can all read and write the same files in the emptyDir volume, 
though that volume can be mounted at the same or different paths in each Container. 
When a Pod is removed from a node for any reason, the data in the emptyDir is deleted forever.

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: time-check
  name: time-check
  namespace: dvl1987
spec:
  containers:
  - image: busybox
    name: time-check
    command: [ "/bin/sh", "-c", "while true; do date; sleep $TIME_FREQ;done>/opt/time/time-check.log" ]
    env:
      - name: TIME_FREQ
        valueFrom:
          configMapKeyRef:
            name: time-config
            key: TIME_FREQ
    volumeMounts:
    - mountPath: /opt/time
      name: cache-volume
  volumes:
  - name: cache-volume
    emptyDir: {}

k -n dvl1987 exec time-check env | grep TIME

Question 4

Create a redis deployment with the following parameters:
Name of the deployment should be redis using the redis:alpine image. It should have exactly 1 replica.
The container should request for .2 CPU. It should use the label app=redis.
It should mount exactly 2 volumes:
Make sure that the pod is scheduled on master node.       
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: redis
    spec:
      nodeName: master
      containers:
      - image: redis:alpine
        name: redis
        resources:
          requests:
            cpu: "0.2"
        volumeMounts:
        - mountPath: /redis-master-data
          name: data
        - mountPath: /redis-master
          name: redis-config
        ports:
        - containerPort: 6379
      volumes:
        - name: redis-config
          configMap:
            name: redis-config
        - name: data
          emptyDir: {}